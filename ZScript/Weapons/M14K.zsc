// ------------------------------------------------------------
// 7.76mm Carbine
// ------------------------------------------------------------
/*
	A shortened version of the M14 battle rifle, rechambered for the newer 7.76mm round. 
	While it may be based on a rifle that's also been used in marksman roles, don't
	expect to hit long distance targets with this.
	
	Compact, Powerful, and Reliable. This is a carbine for any A-Team gunning for victory.
	
	The holographic sight is a reproduction of the Bushnell Holo but with more
	more modern technology , better materials, and QoL features like an automatic
	shut off and the AIMTekÂ® patented ShakeAwake system. 
	
	This sight was made to cash in on the trend around retro weapon builds, and
	despite that reason, it is still a high quality product.
*/

const HDLD_M14SHORT="m14";

class HD_M14Short:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "M14K 7.76 Carbine"
		//$Sprite "M14PA0"

		+hdweapon.fitsinbackpack
		obituary "%o battled with %k and lost.";
		weapon.selectionorder 6;
		weapon.slotpriority 1.25;
		weapon.slotnumber 6;
		weapon.kickback 30;
		weapon.bobrangex 0.3;
		weapon.bobrangey 0.9;
		scale 0.65;
		inventory.pickupmessage "You got the 7.76mm Carbine!";
		hdweapon.barrelsize 27,0.5,1;
		tag "$TAG_M14K";
		hdweapon.refid HDLD_M14SHORT;
		hdweapon.loadoutcodes "
			\cufiremode - 0/1, semi/auto
			\cuholosight - 0/1, no/yes
			\cudot - 0-5";
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	
	override double gunmass()
	{
		double howmuch=7;
		return howmuch+weaponstatus[M14G_MAG]*0.04;
	}
	
	override double weaponbulk(){
		double blx=(weaponstatus[0]&M14F_SIGHT)?80:75;
		int mgg=weaponstatus[M14G_MAG];
		return blx+(mgg<0?0:(ENC_776MAG_LOADED+mgg*ENC_776_LOADED));
	}
	
	override string,double getpickupsprite(bool usespare){
		int wep0=GetSpareWeaponValue(0,usespare);
		return ((wep0&M14F_SIGHT)?"M14H":"M14G")
			..((GetSpareWeaponValue(M14G_MAG,usespare)<0)?"Y":"X").."0",1.;
	}
	
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
		
		//Packed Ammo
		
		int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD7mMag"))) % 100;
		if(nextmagloaded>=30){
				sb.drawimage("RMAGNORM",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM);
			}else if(nextmagloaded<1){
				sb.drawimage("RMAGEMPTY",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.);
			}else sb.drawbar(
				"RMAGNORM","RMAGGREY",
				nextmagloaded,30,
				(-46,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HD7mMag"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		
		int nextcliploaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD7mClip")));
			if(nextcliploaded<1){
				sb.drawimage("RCLPF0",(-60,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextcliploaded?0.6:1.,scale:(1.2,1.2));
			}else if(nextcliploaded<3){
				sb.drawimage("RCLPE0",(-60,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.2,1.2));
			}else if(nextcliploaded<5){
				sb.drawimage("RCLPD0",(-60,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.2,1.2));
			}else if(nextcliploaded<7){
				sb.drawimage("RCLPC0",(-60,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.2,1.2));
			}else if(nextcliploaded<9){
				sb.drawimage("RCLPB0",(-60,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.2,1.2));
			}else sb.drawimage("RCLPA0",(-60,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.2,1.2));
			sb.drawnum(hpl.countinv("HD7mClip"),-53,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		
		//Loose Ammo
		
		int sevenmil=hpl.countinv("SevenMilAmmo");
			sb.drawimage("TEN7A0",(-62,-14),sb.DI_SCREEN_CENTER_BOTTOM,alpha:sevenmil?1:0.6,scale:(1.2,1.2));
			sb.drawnum(sevenmil,-56,-18,sb.DI_SCREEN_CENTER_BOTTOM);
			
		int sevenmilrec=hpl.countinv("SevenMilAmmoRecast");
			if(sevenmilrec>0){
				sb.drawimage("TEN7A0",(-47,-14),sb.DI_SCREEN_CENTER_BOTTOM,alpha:sevenmilrec?1:0.6,scale:(1.2,1.2));
				sb.drawnum(sevenmilrec,-41,-18,sb.DI_SCREEN_CENTER_BOTTOM);
			}


		}
		
		if(!(hdw.weaponstatus[0]&M14F_CIVILIAN)){
			string llba="RBRSA3A7";
			if(hdw.weaponstatus[0]&M14F_FULLAUTO)llba="STFULAUT";
			sb.drawimage(
				llba,(-22,-10),
				sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TRANSLATABLE|sb.DI_ITEM_RIGHT
			);
		}
		int lod=max(hdw.weaponstatus[M14G_MAG],0);
		sb.drawwepnum(lod,30);
		if(hdw.weaponstatus[M14G_CHAMBER]==2){
			sb.drawrect(-19,-11,3,1);
			lod++;
		}
	}
	override string gethelptext(){
		return
		LWPHELP_FIRESHOOT
		..LWPHELP_FIREMODE..Stringtable.Localize("$M14K_HELP_FIREMODE")
		..LWPHELP_RELOAD..Stringtable.Localize("$M14K_HELP_RELOAD")
		..LWPHELP_ALTRELOAD..Stringtable.Localize("$M14K_HELP_ALTRELOAD")
		..LWPHELP_USE.."+"..LWPHELP_ALTRELOAD..StringTable.Localize("$M14K_HELP_ALTRELOAD2")
		..LWPHELP_USE.."+"..LWPHELP_RELOAD..StringTable.Localize("$LIBWH_UPRELOAD")
		..LWPHELP_MAGMANAGER
		..LWPHELP_UNLOADUNLOAD
		;
	}

	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		vector2 bobb=bob*1.18;
		if(weaponstatus[0]&M14F_SIGHT){
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<40){
				string whichdot=sb.ChooseReflexReticle(hdw.weaponstatus[M14G_DOT]);
				sb.drawimage(
					whichdot,(0,0)+bob*1.1,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.01,
					col:0xFF000000|sb.crosshaircolor.GetInt()
				);
			}
			sb.drawimage(
				"M14K_HST",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
		}else{
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(
				-16+bob.x,-4+bob.y,32,16,
				sb.DI_SCREEN_CENTER
			);
		sb.drawimage(
			"M14K_ST1",(0,-1.65)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.98,scale:(0.85,0.85)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"M14K_ST2",(0,-13.85)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,scale:(1.30,1.30)
		);
		}
	}


	override void SetReflexReticle(int which){weaponstatus[M14G_DOT]=which;}
	override void failedpickupunload(){
		failedpickupunloadmag(M14G_MAG,"HD7mMag");
	}
	
		int handrounds;
	override void DetachFromOwner(){
		if(handrounds>0){
			actor dropper=self;
			if(owner)dropper=owner;

			int fullets=handrounds/100;

			if(fullets>0)dropper.A_DropItem("SevenMilAmmo",fullets);

			handrounds=(handrounds%100)-fullets;
			if(handrounds>0)dropper.A_DropItem("SevenMilAmmoRecast",handrounds);
		}
		super.DetachFromOwner();
	}
	
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("SevenMilAmmo"))owner.A_DropInventory("SevenMilAmmo",30);
			else if(owner.countinv("HD7mMag"))
				owner.A_DropInventory("HD7mMag",1);
			else if(owner.countinv("HD7mClip"))
				owner.A_DropInventory("HD7mClip",1);
		}
	}

	override void ForceBasicAmmo(){
		owner.A_TakeInventory("SevenMilAmmo");
		owner.A_TakeInventory("SevenMilBrass");
		owner.A_TakeInventory("FourMilAmmo");
		ForceOneBasicAmmo("HD7mMag");
	}
	override void tick(){
		super.tick();
		drainheat(M14G_HEAT,3);
	}
	action void A_Chamber(bool unloadonly=false){
		//A_StartSound("weapons/libchamber",8,CHANF_OVERLAP);
		actor brsss=null;
		if(invoker.weaponstatus[M14G_CHAMBER]==1){
			brsss=A_EjectCasing(
				"HDSpent7mm",-1,
				(frandom(0.3,0.6),frandom(-8.7,-9.2),frandom(0,0.5)),
				(0,0,-3)
			);
			brsss.vel+=vel;
			brsss.A_StartSound(brsss.bouncesound,volume:0.4);
		}else if(invoker.weaponstatus[M14G_CHAMBER]==2){
			double fc=max(pitch*0.01,5);
			double cosp=cos(pitch);
			[cosp,brsss]=A_SpawnItemEx(
				invoker.weaponstatus[0]&M14F_RECAST?"HDLoose7mmRecast":"HDLoose7mm",
				cosp*12,0,height-8-sin(pitch)*12,
				cosp*fc,0.2*randompick(-1,1),-sin(pitch)*fc,
				-90,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			brsss.vel+=vel;
			brsss.A_StartSound(brsss.bouncesound,volume:0.4);
		}
		if(!unloadonly && invoker.weaponstatus[M14G_MAG]>0){
			invoker.weaponstatus[M14G_CHAMBER]=2;
			if(HD7mMag.CheckRecast(invoker.weaponstatus[M14G_MAG],invoker.weaponstatus[M14G_RECASTS])){
				invoker.weaponstatus[0]|=M14F_RECAST;
				invoker.weaponstatus[M14G_RECASTS]--;
			}
			invoker.weaponstatus[M14G_MAG]--;
		}else{
			invoker.weaponstatus[0]&=~M14F_RECAST;
			invoker.weaponstatus[M14G_CHAMBER]=0;
			if(brsss!=null)brsss.vel=vel+(cos(angle),sin(angle),-2);
		}
	}
	
	action void A_CheckHoloSight(){
		if(
			invoker.weaponstatus[0]&M14F_SIGHT
		)Player.GetPSprite(PSP_WEAPON).sprite=getspriteindex("M14HA0");
		else Player.GetPSprite(PSP_WEAPON).sprite=getspriteindex("M14GA0");
	}
	
	action void A_LoadingClip()
	{
		{
		let ccc=hdmagammo(findinventory("HD7mClip"));
			if(ccc){
				//find the last mag that has anything in it and load from that
				bool fullmag=false;
				int magindex=-1;
				for(int i=ccc.mags.size()-1;i>=0;i--){
					if(ccc.mags[i]>=30)fullmag=true;
					if(magindex<0&&ccc.mags[i]>0)magindex=i;
					if(fullmag&&magindex>0)break;
				}
				if(magindex<0||invoker.weaponstatus[M14G_MAG]>29){
					setweaponstate("clipreloaddone");
					A_StartSound("weapons/bossclick",CHAN_WEAPONBODY);
					return;
				}
				
				//strip one round and load it

				if(HD7mMag.CheckRecast(ccc.mags[magindex])){
					invoker.weaponstatus[M14G_RECASTS]++;
				}else{
					ccc.mags[magindex]-=100;
				}
				invoker.weaponstatus[M14G_MAG]++;
				ccc.mags[magindex]--;
			}
		}
	}
	
	states{

	preload:
		M14G ABCDEFGHIJ 0;
		M14H ABCDEFGHIJ 0;
	select0:
		M14G A 0 
		{
			A_CheckDefaultReflexReticle(M14G_DOT);
			A_OverlayPivot(PSP_WEAPON,0.5,1);
			A_OverlayRotate(PSP_WEAPON,0);
		}
		M14G A 0 A_CheckHoloSight();
		#### A 0 A_JumpIf(invoker.weaponstatus[M14G_CHAMBER]>0,2);
		#### B 0;
		#### # 0{
			A_CheckDefaultReflexReticle(M14G_DOT);
		}goto select0small;
	deselect0:
		M14G A 0 A_CheckHoloSight();
	deselect0.cont:
		#### A 0 A_JumpIf(invoker.weaponstatus[M14G_CHAMBER]>0,2);
		#### B 0;
		#### # 0;
		goto deselect0big;
	ready:
		//M14G A 0;
		#### A 0 A_JumpIf(invoker.weaponstatus[M14G_CHAMBER]>0,2);
		#### B 0;
		#### # 1{A_WeaponReady(WRF_ALL);A_OverlayRotate(PSP_WEAPON,0);}
		goto readyend;
	user3:
		---- A 0 A_MagManager(countinv("HD7mMag")?"HD7mMag":"HD7mClip");
		goto ready;

	fire:
	hold:
		#### # 0;
	shoot:
		---- A 1{
			if(invoker.weaponstatus[M14G_CHAMBER]==2)A_Gunflash();
			else setweaponstate("chamber_manual");
			A_WeaponReady(WRF_NOFIRE); //don't allow firing if supposed to be lowered
		}
		#### C 1 
		{	
			if(invoker.weaponstatus[M14G_MAG]<=0)setweaponstate("shoot.bho");
			else 
			{
				A_StartSound("weapons/m14kbolt",CHAN_5,volume:0.35);
				A_Chamber();
			}
		}
		#### D 1;
		#### A 0 offset(0,33)
		{
			if(invoker.weaponstatus[0]&M14F_FULLAUTO)A_Refire("fire");
		}
		goto nope;
	shoot.bho:
		#### C 1 
		{	
			A_StartSound("weapons/m14kboltlock",CHAN_5,volume:0.65);
			A_Chamber();
		}
		#### EB 1;
		goto nope;
	strawberry:
		#### C 1 
		{	
			A_StartSound("weapons/m14kbolt",CHAN_5,volume:0.35,pitch:0.9);
		}
		#### DA 1;
		goto nope;
	flash:
		M14F A 1 bright{
			A_Light1();
			A_StartSound("weapons/m14kshot",CHAN_WEAPON);

			HDBulletActor.FireBullet(self,
				invoker.weaponstatus[0]&M14F_RECAST?"HDB_776r":"HDB_776",spread:0.25,speedfactor:0.95);
			

				HDFlashAlpha(32);
				A_ZoomRecoil(0.95);
				A_MuzzleClimb(
					-0.2,-0.4,
					-frandom(1.0,1.8),-frandom(3.4,4.2),
					-frandom(0.3,0.6),-frandom(1.1,1.6),
					-0.2,-0.4
				);
			

			invoker.weaponstatus[M14G_CHAMBER]=1;
			invoker.weaponstatus[M14G_HEAT]+=random(4,6);
			invoker.weaponstatus[0]&=~M14F_RECAST;
			A_AlertMonsters();
		}
		M14F B 1 {HDFlashAlpha(2);IsMoving.Give(self,2);}
		goto lightdone;
	
	chamber_manual:
		---- A 1 offset(-1,34){
			if(
				invoker.weaponstatus[M14G_CHAMBER]==2
				||invoker.weaponstatus[M14G_MAG]<1
			)setweaponstate("nope");
		}
	//altfire:
		#### AF 2 offset(1,34);
		#### G 2 offset(2,34);
		#### H 2 offset(5,40) 
		{
			A_StartSound("weapons/m14kboltback",CHAN_6,volume:0.8);
			A_MuzzleClimb(frandom(-0.4,0.4),frandom(-0.4,0.4),wepdot:false);
		}
		#### I 1 offset(7,54){
			A_Chamber();
		}
		#### I 2 offset(6,44);
		#### I 4 offset(5,38);
		#### J 1 offset(5,37) 
		{
			A_StartSound("weapons/m14kboltfwd",CHAN_6,volume:0.8);
			A_MuzzleClimb(frandom(0.2,-2.4),frandom(0.2,-1.4),wepdot:false);
		}
		#### K 1 offset(3,36);
		#### K 2 offset(2,34);
		#### A 2 offset(0,32);
		goto readyend;

	firemode:
		---- A 1{invoker.weaponstatus[0]^=M14F_FULLAUTO;}goto nope;


	unloadchamber:		
		---- A 1 offset(1,34){
			if(
				invoker.weaponstatus[M14G_CHAMBER]<1
			)setweaponstate("nope");
		}
		#### AF 2 offset(1,34);
		#### G 2 offset(2,34);
		#### H 2 offset(5,40) 
		{
			A_StartSound("weapons/m14kboltback",CHAN_6,volume:0.8);
			A_MuzzleClimb(frandom(-0.4,0.4),frandom(-0.4,0.4),wepdot:false);
		}
		#### I 1 offset(7,44)
		{
			A_Chamber(true);
		}
		#### I 2 offset(9,48);
		#### I 4 offset(12,52);
		#### # 1 offset(10,60) A_StartSound("weapons/m14kboltback",CHAN_5,volume:0.2,pitch:1.1);
		#### # 1 offset(8,55);
		#### # 1 offset(4,50);
		#### B 2 offset(2,46);
		#### B 2 offset(1,34);
		goto nope;

	loadchamber:
		#### A 0 A_JumpIf(invoker.weaponstatus[M14G_CHAMBER]>0,"nope");
		#### A 0 A_JumpIf(
			!countinv("SevenMilAmmo")
			&&!countinv("SevenMilAmmoRecast")
		,"nope");
		
		#### B 1 offset(0,34) A_StartSound("weapons/pocket",9);
		#### B 2 offset(2,36);
		#### B 8 offset(5,40);
		#### B 8 offset(7,44);
		#### B 8 offset(6,43);
		#### B 10 offset(4,39){
			class<inventory> rndtp="SevenMilAmmo";
			if(!countinv(rndtp))rndtp="SevenMilAmmoRecast";

			if(countinv(rndtp)){
				A_TakeInventory(rndtp,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[M14G_CHAMBER]=2;

				if(rndtp=="SevenMilAmmoRecast")invoker.weaponstatus[0]|=M14F_RECAST;
				else invoker.weaponstatus[0]&=~M14F_RECAST;

			}else A_SetTics(4);
		}
		#### L 1 offset(4,39);
		#### L 1 offset(2,36)
		{
			A_StartSound("weapons/m14kboltfwd",CHAN_6,volume:0.8);
		}
		#### J 1 offset(2,38);
		#### K 1 offset(1,34);
		#### A 0;
		goto readyend;

	user4:
	unload:
		---- A 1;
		#### # 0{
			invoker.weaponstatus[0]|=M14F_JUSTUNLOAD;
			if(
				invoker.weaponstatus[M14G_MAG]>=0  
			){
				return resolvestate("unmag");
			}else if(
				invoker.weaponstatus[M14G_CHAMBER]>0  
			){
				return resolvestate("unloadchamber");
			}
			return resolvestate("nope");
		}
	reload:
		#### # 0{
			int inmag=invoker.weaponstatus[M14G_MAG];
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD7mMag");
			bool haverounds=countinv("SevenMilAmmo")||countinv("SevenMilAmmoRecast");
			invoker.weaponstatus[0]&=~M14F_JUSTUNLOAD;

			//full mag
			if(inmag>=30)return resolvestate("nope");
				
			//no mags/empty mags
				if(nomags
					&&(
						!haverounds
						||inmag>=0
						||invoker.weaponstatus[M14G_CHAMBER]>0
					)
				)
			return resolvestate("altreload");

			//no mag, empty chamber, have loose rounds
			if(
				inmag<0
				&&invoker.weaponstatus[M14G_CHAMBER]<1
				&&haverounds
				&&(
					pressinguse()
					||nomags
				)
			)return resolvestate("loadchamber");

			if(
				invoker.weaponstatus[M14G_MAG]>0  
			){
				//if full mag and unchambered, chamber
				if(
					invoker.weaponstatus[M14G_MAG]>=30  
					&&invoker.weaponstatus[M14G_CHAMBER]!=2
				){
					return resolvestate("chamber_manual");
				}				
			}
			return resolvestate("unmag");
		}

	unmag:
		#### # 1 offset(0,34);
		#### # 1 offset(2,36);
		#### # 1 offset(4,40);
		#### # 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4),wepdot:false);
			if(invoker.weaponstatus[M14G_MAG]>-1)A_StartSound("weapons/m14kclick2",8);
		}
		#### # 3 offset(9,43);
		#### # 4 offset(14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4),wepdot:false);
			if(invoker.weaponstatus[M14G_MAG]>-1)A_StartSound ("weapons/m14kunload",8,CHANF_OVERLAP);
		}
		#### # 0{
			int magamt=invoker.weaponstatus[M14G_MAG];
			if(magamt<0){setweaponstate("magout");return;}

			if(magamt>0){
				int fullets=clamp(30-invoker.weaponstatus[M14G_RECASTS],0,magamt);
				magamt+=fullets*100;
			}

			invoker.weaponstatus[M14G_MAG]=-1;
			invoker.weaponstatus[M14G_RECASTS]=0;
			if(
				!PressingReload()
				&&!PressingUnload()
			){
				HDMagAmmo.SpawnMag(self,"HD7mMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD7mMag",magamt);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		#### # 7 offset(12,52)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4),wepdot:false);
		#### # 0 A_StartSound("weapons/pocket",9);
		#### # 7 offset(13,53)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4),wepdot:false);
		#### # 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4),wepdot:false);
		#### # 0{
		}goto magout;
	magout:
		#### # 4{
			invoker.weaponstatus[M14G_MAG]=-1;
			invoker.weaponstatus[M14G_RECASTS]=0;
			if(invoker.weaponstatus[0]&M14F_JUSTUNLOAD)setweaponstate("reloaddone");
		}goto loadmag;


	loadmag:
		#### # 0 A_StartSound("weapons/pocket",9);
		#### # 9 offset(13,53)A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8),wepdot:false);
		#### # 8 offset(14,54){A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8),wepdot:false);A_StartSound("weapons/m14kclick2",8);}
		#### # 7;
		#### # 6 offset(12,52){
			let mmm=hdmagammo(findinventory("HD7mMag"));
			if(mmm){
				int minput=mmm.TakeMag(true);
				int rndcnt=minput%100;
				invoker.weaponstatus[M14G_MAG]=rndcnt;
				invoker.weaponstatus[M14G_RECASTS]=clamp(rndcnt-(minput/100),0,rndcnt);

				A_StartSound("weapons/m14kclick",8);
				A_StartSound("weapons/m14kload",8,CHANF_OVERLAP);
			}
		}
		#### # 2 offset(10,50) A_StartSound("weapons/m14kclick2",8,CHANF_OVERLAP);
		goto reloaddone;

	reloaddone:
		#### # 2 offset(8,46);
		#### # 1 offset (4,40);
		#### # 1 offset (2,34);
		goto chamber.boltcatch;

	//Stripper Clips
	
	altreload:
		---- A 1
		{
			if(
			!countinv("HD7mClip")
			&&!countinv("SevenMilAmmoRecast")
			&&!countinv("SevenMilAmmo")
			)
			
			setweaponstate("nope");
		}
	clipreloadstart:
		---- A 1 offset(1,34){
			if(
				invoker.weaponstatus[M14G_MAG]<0
			)setweaponstate("nope");
			else if(invoker.weaponstatus[M14G_CHAMBER]<=0
			)setweaponstate("clipreloadstart.open");
		}
		#### AF 2 offset(1,34) A_OverlayPivot(PSP_WEAPON,0.5,1);
		#### G 2 offset(2,34) A_OverlayRotate(PSP_WEAPON,-3);
		#### H 2 offset(5,40) 
		{
			A_StartSound("weapons/m14kboltback",CHAN_6,volume:0.8);
			A_MuzzleClimb(frandom(-0.4,0.4),frandom(-0.4,0.4),wepdot:false);
			A_OverlayRotate(PSP_WEAPON,-6);
		}
		#### I 2 offset(7,44)
		{
			A_Chamber(true);
			A_OverlayRotate(PSP_WEAPON,-9);
		}
	goto clipreload.cont;
	
	
	loadhand:
		---- A 0 A_JumpIfInventory("SevenMilAmmo",1,"loadhandloop");
		---- A 0 A_JumpIfInventory("SevenMilAmmoRecast",1,"loadhandloop");
		goto clipreloaddone;
	loadhandloop:
		---- A 4{
			class<inventory> rndtp="SevenMilAmmo";
			if(
				!countinv(rndtp)
				||(
					countinv("SevenMilAmmoRecast")
					&&pressingzoom()
				)
			)rndtp="SevenMilAmmoRecast";
			int hnd=min(
				countinv(rndtp),3,
				30-invoker.weaponstatus[M14G_MAG]
			);
			if(hnd<1){
				setweaponstate("clipreloaddone");
				return;
			}else{
				A_TakeInventory(rndtp,hnd,TIF_NOTAKEINFINITE);
				invoker.handrounds=hnd;
				if(rndtp=="SevenMilAmmo")invoker.handrounds+=hnd*100;
				A_StartSound("weapons/pocket",9,volume:0.2);
			}
		}
	loadone:
		---- A 2 offset(9,50) A_JumpIf(invoker.handrounds<1,"loadhandnext");
		---- A 2 offset(7,46){
			if(invoker.handrounds>100)invoker.handrounds-=100;
			else invoker.weaponstatus[M14G_RECASTS]++;

			invoker.handrounds--;
			invoker.weaponstatus[M14G_MAG]++;

			A_StartSound("weapons/bossclick2",8);
		}
		---- A 2 offset(8,49);
		loop;
	loadhandnext:
		---- A 8 offset(9,48){
			if(
				(
					!countinv("SevenMilAmmo")	//don't strip clips automatically
					&&!countinv("SevenMilAmmoRecast")
				)
			)setweaponstate("clipreloaddone");
		}
		---- A 0 offset(9,48){
			if(
				PressingReload()||
				PressingAltReload()
			)
			{
				setweaponstate("loadhandloop");
				A_StartSound("weapons/pocket",9,volume:0.2);
			}
		}goto clipreloaddone;
	
	
	clipreloadstart.open:
		#### B 1 offset(1,34) {A_OverlayPivot(PSP_WEAPON,0.5,1);A_StartSound("weapons/pocket",9);}
		#### L 1 offset(2,34) A_OverlayRotate(PSP_WEAPON,-2);
		#### L 2 offset(5,40) A_OverlayRotate(PSP_WEAPON,-5);
		#### L 2 offset(7,44) A_OverlayRotate(PSP_WEAPON,-7);
	clipreload.cont:
		#### # 0
		{
			if(!countinv("HD7mClip")||PressingUse())setweaponstate("loadhand");
		}
		#### I 4 offset(9,48);
		#### I 6 offset(12,52);
		#### I 6 offset(14,59);
		#### I 0{
			int mg=invoker.weaponstatus[M14G_MAG];
			if(mg==30)setweaponstate("clipreloaddone");
			//else if(invoker.weaponstatus[0]&M14F_DONTUSECLIPS)setweaponstate("loadhand");
			else if(
				(
					mg<1
					||(
						!countinv("SevenMilAmmo")
						&&!countinv("SevenMilAmmoRecast")
					)
				)&&!HDMagAmmo.NothingLoaded(self,"HD7mClip")
			)setweaponstate("loadclip");
		}
		goto loadclip;
		loadclip:
		#### I 0 A_JumpIf(invoker.weaponstatus[M14G_MAG]>29,"clipreloaddone");
		#### I 3 offset(16,65){
			let ccc=hdmagammo(findinventory("HD7mClip"));
			if(ccc){
				//find the last mag that has anything in it and load from that
				bool fullmag=false;
				int magindex=-1;
				for(int i=ccc.mags.size()-1;i>=0;i--){
					if(ccc.mags[i]>=30)fullmag=true;
					if(magindex<0&&ccc.mags[i]>0)magindex=i;
					if(fullmag&&magindex>0)break;
				}
				if(magindex<0){
					setweaponstate("clipreloaddone");
					return;
				}

				//load the whole clip at once if possible
				if(
					fullmag
					&&invoker.weaponstatus[M14G_MAG]<21
				){
					setweaponstate("loadwholeclip");
					return;
				}

				//strip one round and load it
				A_StartSound("weapons/bossclick2",CHAN_WEAPONBODY);

				if(HD7mMag.CheckRecast(ccc.mags[magindex])){
					invoker.weaponstatus[M14G_RECASTS]++;
				}else{
					ccc.mags[magindex]-=100;
				}
				invoker.weaponstatus[M14G_MAG]++;
				ccc.mags[magindex]--;
			}
		}
		goto clipreloadfallback;
		#### I 1 offset(16,68) A_JumpIf(
			PressingReload()||
			PressingFire()||
			PressingAltFire()||
			PressingZoom()
		,"clipreloaddone");
		loop;
		
	//the horror
	
	clipreloadfallback:
		#### L 3 offset(16,70) 
		{
			A_OverlayRotate(PSP_WEAPON,-8);
			A_StartSound("weapons/bossclick2",8);
		}
		#### ### 2 offset(17,72) 
		{
			A_LoadingClip();
			A_StartSound("weapons/bossclick2",8,pitch:1.01);
		}
		#### ### 1 offset(16,70) 
		{
			A_StartSound("weapons/bossclick2",8,CHANF_OVERLAP,pitch:1.02);
			A_LoadingClip();
		}
		#### ### 0 offset(15,68) 
		{
			A_StartSound("weapons/bossclick2",8,CHANF_OVERLAP,pitch:1.02);
			A_LoadingClip();
		}
		#### # 2 offset(14,66) 
		{
			A_StartSound("weapons/bossclick",CHAN_WEAPONBODY);
			A_LoadingClip();
		}
	goto clipreloaddone;
		
	loadwholeclip:
		#### L 3 offset(16,70) 
		{
			A_OverlayRotate(PSP_WEAPON,-8);
			A_StartSound("weapons/bossclick2",8);
		}
		#### ### 2 offset(17,72) A_StartSound("weapons/bossclick2",8,pitch:1.01);
		#### ### 1 offset(16,70) A_StartSound("weapons/bossclick2",8,CHANF_OVERLAP,pitch:1.02);
		//#### ### 0 offset(15,68) A_StartSound("weapons/bossclick2",8,CHANF_OVERLAP,pitch:1.02);
		#### # 2 offset(14,66){
			A_StartSound("weapons/bossclick",CHAN_WEAPONBODY);
			let ccc=hdmagammo(findinventory("HD7mClip"));
			if(ccc){
				int roundraw=ccc.TakeMag(true);
				int roundcount=roundraw%100;
				int reccount=roundcount-(roundraw/100);

				invoker.weaponstatus[M14G_RECASTS]+=reccount;
				invoker.weaponstatus[M14G_MAG]+=roundcount;

				if(pressingreload()){
					ccc.addamag(0);
					A_SetTics(10);
					A_StartSound("weapons/pocket",CHAN_POCKETS);
				}else HDMagAmmo.SpawnMag(self,"HD7mClip",0);
			}
		}
		
		#### I 0 offset(14,66) A_JumpIf(
			PressingReload()||
			PressingAltReload()
		,"keeploadingclip");
		goto clipreloaddone;
		
	keeploadingclip:
		#### I 0 offset(14,66) A_JumpIf(PressingUse(),"loadhand");
		#### I 3 offset(13,63) A_StartSound("weapons/pocket",CHAN_POCKETS);
		#### I 4 offset(12,60);
		#### I 5 offset(14,59);
	goto loadclip;
	clipreloaddone:
		#### I 1 offset(10,60) A_OverlayRotate(PSP_WEAPON,-7);
		#### # 1 offset(8,55) A_OverlayRotate(PSP_WEAPON,-6);
		#### # 2 offset(4,50) A_OverlayRotate(PSP_WEAPON,-3);
		#### # 2 offset(2,46) A_OverlayRotate(PSP_WEAPON,-0);
		#### # 2 offset(1,34);
		//goto nope;
	chamber.boltcatch:
		#### # 0 offset(-1,34){
		A_OverlayRotate(PSP_WEAPON,-0);
			if(
				invoker.weaponstatus[M14G_CHAMBER]>1||invoker.weaponstatus[M14G_MAG]<1
			)setweaponstate("nope");
		}
		#### I 2 offset(-1,34);
		#### I 1 offset(-2,36)
		{
			A_Chamber();
			A_StartSound("weapons/m14kboltfwd",CHAN_6,volume:0.8);
		}
		#### J 1 offset(-2,38);
		#### K 1 offset(-1,34);
		#### A 0;
		goto nope;
	
	//thank god thats over
	
	spawn:
		TNT1 A 1;
		M14G X -1{
			if(invoker.weaponstatus[M14G_MAG]<0)frame=23;
			if(
				invoker.weaponstatus[0]&M14F_SIGHT
			)invoker.sprite=getspriteindex("M14H");
		}
		M14H # -1;
		wait;
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[M14G_MAG]=30;
		weaponstatus[M14G_RECASTS]=0;
		weaponstatus[M14G_CHAMBER]=2;
		if(!idfa&&!owner){
			weaponstatus[M14G_HEAT]=0;
		}
	}
	override void loadoutconfigure(string input){
	
		int xhdot=getloadoutvar(input,"dot",3);
		if(xhdot>=0)weaponstatus[M14G_DOT]=xhdot;
	
		int holosight=getloadoutvar(input,"holosight",1);
		if(
			!holosight
			&&xhdot<0
		)weaponstatus[0]&=~M14F_SIGHT;
		else{
			weaponstatus[0]|=M14F_SIGHT;
			if(xhdot>=0)weaponstatus[M14G_DOT]=xhdot;
		}

		int firemode=getloadoutvar(input,"firemode",1);
		if(firemode>0)weaponstatus[0]|=M14F_FULLAUTO;
		else weaponstatus[0]&=~M14F_FULLAUTO;
	}
}

enum HDM14Shortystatus{
	M14F_JUSTUNLOAD=1,
	M14F_FULLAUTO=2,
	M14F_CIVILIAN=4,
	M14F_DONTUSECLIPS=8, 
	M14F_RECAST=16,
	M14F_SIGHT=32,

	M14G_FLAGS=0,
	M14G_MAG=1, //-1 unmagged
	M14G_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	M14G_DOT=3,
	M14G_RECASTS=4,
	M14G_HEAT=5,
}
